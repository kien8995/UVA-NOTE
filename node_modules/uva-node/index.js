#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const sprintf = require('sprintf').sprintf;
const util = require('./util');
const Account = require('./account');
const Adapter = require('./adapter');
const App = require('./app');

var Table = require('cli-table');

const SETTING_FILE_NAME = ".uva-node";
const SETTING_PATH = path.join(util.getUserHomePath(), SETTING_FILE_NAME);

var app = new App();

if (fs.existsSync(SETTING_PATH))
{
    app.load(SETTING_PATH);
}
else
{
    console.log('Setting file not found: %s', SETTING_PATH);
    console.log('A new one will be auto-created after exiting the program');
}

process.on('exit', saveSetting);

var args = process.argv.splice(2);
var interactive = args.length === 0;

if (! interactive)
{
    executeLine(args.join(' '), function(){
        process.exit(0);
    });
    return;
}

var rl = readline.createInterface(process.stdin, process.stdout);

rl.on('line', function(line){
    executeLine(line, function (quitting){    
        if (quitting)
        {
            rl.close();
            return;
        }

        console.log();
        rl.prompt();
    });
})
.on('close', function() {
    console.log('--------------------------------------------'.rainbow + 'Have a great day!'.bold.green + '--------------------------------------------'.rainbow);
    process.exit(0);
});
rl.setPrompt('> ');
rl.prompt();

function saveSetting()
{
    app.save(SETTING_PATH);
}

//--------------------------------------------------------------------------------------------------------

function printStatus(subs)
{
    //console.log(" Sub Id   |   Prob #   |          Verdict        |   Lang   |    Runtime  |   Rank  |       Sub Time".bold.cyan);
    //           123456789---123456---1234567890123456---123456---1234567---12345---yyyy-mm-dd hh:mm:ss

    //var hasColors = process.stdout.isTTY;
    //var formatStr = "%-10d    %-9d   %"+(hasColors ? 22 : 22)+"s    %6s       %3d.%03d     %5s     %4d-%02d-%02d %02d:%02d:%02d"; 
    //var verdictKey = hasColors ? 'coloredLabel' : 'label';
    //var verdictKey = hasColors ? 'label' : 'label';
    //console.time("Time elapsed: ".bold.red);

    var date = new Date();

    var subIdz = [];
    var probIdz = [];
    var verdictz = [];
    var runtimez = [];
    var timez = [];
    var langz = [];
    var rankz = [];
    for (var i = 0; i < subs.length;i++)
    {
        var sub = subs[i];

        //var subId = sub[0];
        subIdz[i] = sub[0];

        //var probId = sub[1];
        probIdz[i] = sub[1];

        var verdict = sub[2];
        verdictz[i] = verdict['coloredLabel'];

        var runtime = sub[3];

        var time = sub[4]; // in millisec

        //var lang = sub[5];
        langz[i] = sub[5];

        var rank = sub[6];
        rankz[i] = (rank < 0 ? '  -' : rank > 9999 ? '>9999' : rank);

        //console.log(verdict['label']+'\n');

        
        var timex = (runtime%1000).toString();
        if(timex.length==2)
        {
        	timex = '0'+timex;
        }
        else if(timex.length==1)
        {
        	timex = '00'+timex;
        }
        //console.log(Math.floor(runtime/1000) + '.' + timex +'\n');
        runtimez[i] = (Math.floor(runtime/1000) + '.' + timex);


        date.setTime(time);

        var y = date.getFullYear();
        var m = (date.getMonth()+1> 9 ? date.getMonth()+1 : '0'+(date.getMonth()+1));
        var d = (date.getDate() > 9 ? date.getDate() : '0'+date.getDate());

        var hh = (date.getHours() > 9 ? date.getHours() : '0'+ date.getHours());
        var mm = (date.getMinutes() > 9 ? date.getMinutes() : '0'+date.getMinutes());
        var ss = (date.getSeconds() > 9 ? date.getSeconds() : '0'+date.getSeconds());

        timez[i] = (y+'-'+m+'-'+d+' '+hh+':'+mm+':'+ss);

        /*console.log(sprintf(formatStr,
            subId, probId, verdict[verdictKey],
            lang, Math.floor(runtime/1000), runtime%1000,
            rank < 0 ? '-' : rank > 9999 ? '>9999' : rank,
            date.getFullYear(), date.getMonth()+1, date.getDate(),
            date.getHours(), date.getMinutes(), date.getSeconds()));
        */
    }
    //Horizontal Tables
        var table = new Table({
        head: [' Sub Id'.bold.cyan, 'Prob #'.bold.cyan, '            Verdict'.bold.cyan,'Lang'.bold.cyan,'Runtime'.bold.cyan,'Rank'.bold.cyan,'      Sub Time'.bold.cyan]
        , colWidths: [11, 8,32,6,9,7,23]
        });

        // table is an Array, so you can `push`, `unshift`, `splice` and friends
        table.push(
        [subIdz[0].toString().bold, probIdz[0].toString().bold,verdictz[0].toString().bold,langz[0].toString().bold,' '+runtimez[0].toString().bold,rankz[0].toString().bold,' '+timez[0].toString().bold]
        ,[subIdz[1].toString().bold, probIdz[1].toString().bold,verdictz[1].toString().bold,langz[1].toString().bold,' '+runtimez[1].toString().bold,rankz[1].toString().bold,' '+timez[1].toString().bold]
        ,[subIdz[2].toString().bold, probIdz[2].toString().bold,verdictz[2].toString().bold,langz[2].toString().bold,' '+runtimez[2].toString().bold,rankz[2].toString().bold,' '+timez[2].toString().bold]
        ,[subIdz[3].toString().bold, probIdz[3].toString().bold,verdictz[3].toString().bold,langz[3].toString().bold,' '+runtimez[3].toString().bold,rankz[3].toString().bold,' '+timez[3].toString().bold]
        ,[subIdz[4].toString().bold, probIdz[4].toString().bold,verdictz[4].toString().bold,langz[4].toString().bold,' '+runtimez[4].toString().bold,rankz[4].toString().bold,' '+timez[4].toString().bold]
        ,[subIdz[5].toString().bold, probIdz[5].toString().bold,verdictz[5].toString().bold,langz[5].toString().bold,' '+runtimez[5].toString().bold,rankz[5].toString().bold,' '+timez[5].toString().bold]
        ,[subIdz[6].toString().bold, probIdz[6].toString().bold,verdictz[6].toString().bold,langz[6].toString().bold,' '+runtimez[6].toString().bold,rankz[6].toString().bold,' '+timez[6].toString().bold]
        ,[subIdz[7].toString().bold, probIdz[7].toString().bold,verdictz[7].toString().bold,langz[7].toString().bold,' '+runtimez[7].toString().bold,rankz[7].toString().bold,' '+timez[7].toString().bold]
        ,[subIdz[8].toString().bold, probIdz[8].toString().bold,verdictz[8].toString().bold,langz[8].toString().bold,' '+runtimez[8].toString().bold,rankz[8].toString().bold,' '+timez[8].toString().bold]
        ,[subIdz[9].toString().bold, probIdz[9].toString().bold,verdictz[9].toString().bold,langz[9].toString().bold,' '+runtimez[9].toString().bold,rankz[9].toString().bold,' '+timez[9].toString().bold]
        );

        console.log(table.toString());
        //console.timeEnd("Time elapsed: ".bold.red);
}





//---------------------------------------------------------------------------------------------------------



/*function printStatus(subs)
{
    console.log(" Sub Id   |   Prob #   |          Verdict        |   Lang   |    Runtime  |   Rank  |       Sub Time".bold.cyan);
    //           123456789---123456---1234567890123456---123456---1234567---12345---yyyy-mm-dd hh:mm:ss

    var hasColors = process.stdout.isTTY;
    var formatStr = "%-10d    %-9d   %"+(hasColors ? 22 : 22)+"s    %6s       %3d.%03d     %5s     %4d-%02d-%02d %02d:%02d:%02d"; 
    var verdictKey = hasColors ? 'coloredLabel' : 'label';
    //var verdictKey = hasColors ? 'label' : 'label';
    var date = new Date();
    for (var i = 0; i < subs.length;i++)
    {
        var sub = subs[i];
        var subId = sub[0];
        var probId = sub[1];
        var verdict = sub[2];
        var runtime = sub[3];
        var time = sub[4]; // in millisec
        var lang = sub[5];
        var rank = sub[6];

        //console.log(verdict['label']+'\n');

        date.setTime(time);
        console.log(sprintf(formatStr,
            subId, probId, verdict[verdictKey],
            lang, Math.floor(runtime/1000), runtime%1000,
            rank < 0 ? '-' : rank > 9999 ? '>9999' : rank,
            date.getFullYear(), date.getMonth()+1, date.getDate(),
            date.getHours(), date.getMinutes(), date.getSeconds()));
    }
}*/

function getCurrentAdapter()
{ 
    var curAdap = app.getCurrentAdapter();
    if (curAdap) return curAdap;

    console.log('No current account selected');
}

function printError(e)
{
    console.log('Error: ' + (e.message || e));
}

function executeLine(line, doneFn) 
{
    var toks;
    try
    {
        toks = util.parseArgs(line);
    }
    catch (e)
    {
        printError(e);
        doneFn();
        return;
    }

    var action = toks[0].toLowerCase();

    function checkToks(argsCount, syntax)
    {
        if (toks.length !== argsCount+1)
        {
            console.log('Syntax: %s', syntax);
            return false;
        }

        return true;
    }

    function tplHandle(subAction)
    {
        switch(subAction)
        {
        case 'add':
            if (toks.length <= 2)
            {
                console.log('Syntax: tpl add <filePath>');
                break;
            }

            var ok = app.getTemplateManager().add(toks[2]);
            if (ok)
                console.log('Added or replaced existing template');
            else
                console.log('Cannot detect language');

            break;

        case 'remove':
            if (toks.length <= 2)
            {
                console.log('Syntax: tpl remove <lang>');
                break;
            }

            var lang = util.getLang(toks[2]);
            if (lang < 0)
            {
                console.log('Unknown language');
                break;
            }

            app.getTemplateManager().remove(lang);
            break;

        case 'show':
            console.log('lang     | file path');
            //           12345678---
            var tpls = app.getTemplateManager().getAll();
            for (var key in tpls)
            {
                var path = tpls[key];
                if (!path) continue;
                console.log(sprintf('%-8s   %s', util.getLangName(key), path));
            }
            break;

        default:
            console.log('unknown sub action');
        }
    }

    switch(action) 
    {
    case 'exit':
    case 'quit':
        doneFn(true);
        return;

    case 'view':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'view <prob #>')) break;
        
        curAdap.getProblemURL(toks[1], function(e, url){
            if (url)
            {
                try 
                {
                    app.openBrowser(url);
                }
                catch (e)
                {
                    printError(e);
                }
            }
            else
                console.log('Problem not found'); 
            
            doneFn();
        });
        
        return;

        //----------------------------------------------------------------------
        case 'detail':
        console.time("Time elapsed".bold.red);
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'detail <prob #>')) break;

        //curAdap.getProblemDetailURL(toks[1]);
        
       
        var theProb = parseInt(toks[1]);
        function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }
        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/p/num/'+theProb);
        var ar = myHTMLRequest.split(/[{},":]+/);
        /*for(i=0;i<ar.length;++i)
        {
            console.log((i)+". "+ar[i]+'\n');
        }*/
        //console.log('\n' + "---------------------------------------------".rainbow + "Problem  Detail".bold.cyan + "---------------------------------------------".rainbow + '\n');
        /*console.log("1. Problem ID: ".bold.yellow + ar[2].bold + '\n');
        console.log("2. Problem Number: ".bold.yellow + ar[4].bold + '\n');
        console.log("3. Title: ".bold.yellow + ar[6].bold + '\n');
        console.log("4. Run-Time Limit : ".bold.yellow + ar[40].bold + " ms".bold.yellow + '\n');
        console.log("5. Accepted User: ".bold.green + ar[8].bold + '\n');
        console.log("6. Accepted : ".bold.green + ar[38].bold + '\n');
        console.log("7. Best Runtime: ".bold.magenta + ar[10].bold + " s".bold.magenta +'\n');
        console.log("8. Best Memory: ".bold.magenta + ar[12].bold + " byte".bold.magenta +'\n');
        console.log("9. Can't be Judged : ".bold.yellow + ar[18].bold + '\n');
        console.log("10.Restricted Function : ".bold.yellow + ar[24].bold + '\n');
        console.log("11.In Queue : ".bold.cyan + ar[20].bold + '\n');
        console.log("12.Submission Error : ".bold.red + ar[16].bold + '\n');
        console.log("13.Compilation Error : ".bold.red + ar[22].bold + '\n');
        console.log("14.Runtime Error : ".bold.red + ar[26].bold + '\n');
        console.log("15.Output Limit Exceeded : ".bold.red + ar[28].bold + '\n');
        console.log("16.Time Limit Exceeded : ".bold.red + ar[30].bold + '\n');
        console.log("17.Memory Limit Exceeded : ".bold.red + ar[32].bold + '\n');
        console.log("18.Wrong Answer : ".bold.red + ar[34].bold + '\n');
        console.log("19.Presentation Error : ".bold.red + ar[36].bold + '\n');
        */
        var str = "";
        if(ar[42]==0)
        {
            str = "unavailable".bold.red;
        }
        else if(ar[42]==1)
        {
            str = "normal".bold;
        }
        else
        {
            str = "special judge".rainbow;
        }
        //console.log("20.Problem Status: ".bold + str + '\n');

        //Horizontal Tables
        var table = new Table({
        head: ["Problem  Detail".bold, ar[6].bold]
        , colWidths: [29, 72]
        });

        // table is an Array, so you can `push`, `unshift`, `splice` and friends
        table.push(
         ["1. Problem ID: ".bold.yellow , ar[2].bold]
        ,["2. Problem Number: ".bold.yellow , ar[4].bold]
        ,["3. Run-Time Limit : ".bold.yellow , ar[40].bold + " ms".bold.yellow]
        ,["4. Accepted User: ".bold.green , ar[8].bold]
        ,["5. Accepted : ".bold.green , ar[38].bold]
        ,["6. Best Runtime: ".bold.magenta , ar[10].bold + " s".bold.magenta]
        ,["7. Best Memory: ".bold.magenta , ar[12].bold + " byte".bold.magenta]
        ,["8. Can't be Judged : ".bold.yellow , ar[18].bold]
        ,["9.Restricted Function : ".bold.yellow , ar[24].bold]
        ,["10.In Queue : ".bold.cyan , ar[20].bold]
        ,["11.Submission Error : ".bold.red , ar[16].bold]
        ,["12.Compilation Error : ".bold.red , ar[22].bold]
        ,["13.Runtime Error : ".bold.red , ar[26].bold]
        ,["14.Output Limit Exceeded : ".bold.red , ar[28].bold]
        ,["15.Time Limit Exceeded : ".bold.red , ar[30].bold]
        ,["16.Memory Limit Exceeded : ".bold.red , ar[32].bold]
        ,["17.Wrong Answer : ".bold.red , ar[34].bold]
        ,["18.Presentation Error : ".bold.red , ar[36].bold]
        ,["19.Problem Status: ".bold , str]
        );

        console.log(table.toString());


        console.timeEnd("Time elapsed".bold.red);
        doneFn();
        //var url = "http://uhunt.felix-halim.net/api/p/num/100";
       
        
        /*function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }*/
            //var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/p/num/100');
            //console.log(myHTMLRequest);


        /*var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'detail <prob #>')) break;
        
        curAdap.getProblemDetailURL(toks[1], function(e, url){
            if (url)
            {
                try 
                {
                    app.openBrowser(url);
                }
                catch (e)
                {
                    printError(e);
                }
            }
            else
                console.log('Problem detail not found'); 
            
            doneFn();
        });*/
        
        return;


        case 'source':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'source <prob #>')) break;
        
        curAdap.getSourceProblemURL(toks[1], function(e, url){
            if (url)
            {
                try 
                {
                    app.openBrowser(url);
                }
                catch (e)
                {
                    printError(e);
                }
            }
            else
                console.log('Problem not found'); 
            
            doneFn();
        });
        
        return;


        case 'viewp':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'viewp <prob #>')) break;
        
        curAdap.getProblemPdfURL(toks[1], function(e, url){
            if (url)
            {
                try 
                {
                    app.openBrowser(url);
                }
                catch (e)
                {
                    printError(e);
                }
            }
            else
                console.log('Problem not found'); 
            
            doneFn();
        });
        
        return;


        case 'pdfp':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'pdfp <prob #>')) break;
        
        curAdap.getProblemPDF(toks[1], function(e, url){
            if (url)
            {
                try 
                {
                    app.openBrowser(url);
                }
                catch (e)
                {
                    printError(e);
                }
            }
            else
                console.log('Problem not found'); 
            
            doneFn();
        });
        
        return;


        case 'pdf':
        //console.time("Time elapsed: ".bold.red);
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'pdf <prob #>')) break;
        console.time('\n'+"Time elapsed".bold.red);
        //curAdap.getProblemFILE(toks[1]);
        var theProb = parseInt(toks[1]);
        var vol = Math.floor(theProb/100);

        var url = 'http://uva.onlinejudge.org/external/'+ vol + '/' + theProb + '.pdf';

        function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }
        var myHTMLRequest = httpGet(url);
        if(myHTMLRequest.length<300)
        {
        	console.log("The problem ".bold.red + theProb + " do not have PDF version :(".bold.red + '\n' + "But, you can try 'pdfp <prob #>' command :)".bold.green);
        }
        else
        {
        	var httpreq = require('httpreq');
        	//       __dirname
       		httpreq.download(url ,
                        'C:\\Users\\trankien\\Downloads\\' + '/Uva - Volume ' + vol + ' - Problem ' + theProb +'.pdf'
            	, function (err, progress){
                	if (err)
                    {
                        console.log('\n' + "Error! Try again... :(".bold.red); 
                        return console.log(err);
                    }
                        //var pro = progress.toString().split(/[{}]+/);
                    	console.log(progress);
                    	console.log('\n' + "Downloading...".bold.magenta);
            	}, function (err, res){
                	if (err)
                	{ 
                    	console.log('\n' + "Error! Try again... :(".bold.red);
                    	return console.log(err);
                	}
                    	console.log(res);
                        console.timeEnd('\n'+"Time elapsed".bold.red);
                    	console.log('\n' + "Done! :)".bold.green);
                    	doneFn();
        	});
		}
        //console.timeEnd("Time elapsed: ".bold.red);
        doneFn();
        return;


        case 'cls':
        /*var lines = process.stdout.getWindowSize()[1];
		for(var i = 0; i < lines; i++) 
		{
    		console.log('\r\n');
		}*/
		//process.stdout.write("\u001b[2J\u001b[0;0H");
		//console.time("Timer");
		function clear() {
    		var stdout = "";

    		if (process.platform.indexOf("win") != 0) 
    		{
        		stdout += "\033[2J";
   			} 
   			else 
   			{
        		var lines = process.stdout.getWindowSize()[1];

        		for (var i=0; i<lines; i++) 
        		{
            		stdout += "\r\n";
        		}
    		}

    		// Reset cursur
    		stdout += "\033[0f";

    		process.stdout.write(stdout);
		}
		clear();
		//console.timeEnd("Timer");
           doneFn();
        return;

        case 'rank':
        
        function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }

        console.time("Time elapsed".bold.red);

        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/ranklist/670378/0/0');
        var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        var x = [];
        for(i=0;i<ar.length;++i)
        {
            var ar1 = ar[i].toString().split(/[,]+/);
            x[i] = ar1;
            //console.log((i)+". "+ar1+'\n');
        }


        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/rank/'+ (x[2] - 1) +'/1');
        var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        var x1 = [];
        for(i=0;i<ar.length;++i)
        {
            var ar1 = ar[i].toString().split(/[,]+/);
            x1[i] = ar1;
            //console.log((i)+". "+ar1+'\n');
        }


        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/rank/'+ (x[2] - 2) +'/1');
        var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        var x2 = [];
        for(i=0;i<ar.length;++i)
        {
            var ar1 = ar[i].toString().split(/[,]+/);
            x2[i] = ar1;
            //console.log((i)+". "+ar1+'\n');
        }

        // var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/rank/'+ (x[2] + 1) +'/1');
        // var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        // var x3 = [];
        // for(i=0;i<ar.length;++i)
        // {
        //     var ar1 = ar[i].toString().split(/[,]+/);
        //     x3[i] = ar1;
        //     //console.log((i)+". "+ar1+'\n');
        // }


        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/rank/'+ (x[2] + 2) +'/1');
        var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        var x4 = [];
        for(i=0;i<ar.length;++i)
        {
            var ar1 = ar[i].toString().split(/[,]+/);
            x4[i] = ar1;
            //console.log((i)+". "+ar1+'\n');
        }

        //Horizontal Tables
        var table = new Table({
        head: ['   Rank'.bold, '   User ID'.bold, '            Name'.bold, '   User Name'.bold, '   AC'.bold, ' Submit'.bold]
        , colWidths: [14, 15,30,18,10,10]
        });

        // table is an Array, so you can `push`, `unshift`, `splice` and friends
        table.push(
         ['----?----', '----?----','----?----','----?----','-?-','-?-']
        ,[x2[2].toString().bold, x2[6].toString().bold,x2[8].toString().bold,x2[10].toString().bold,x2[12].toString().bold,x2[14].toString().bold]
        ,[x1[2].toString().bold, x1[6].toString().bold,x1[8].toString().bold,x1[10].toString().bold,x1[12].toString().bold,x1[14].toString().bold]
        ,[x[2].toString().bold.green, x[6].toString().bold.green,x[8].toString().bold.green,x[10].toString().bold.green,x[12].toString().bold.green,x[14].toString().bold.green]
        ,['----?----', '----?----','----?----','----?----','-?-','-?-']
        ,[x4[2].toString().bold, x4[6].toString().bold,x4[8].toString().bold,x4[10].toString().bold,x4[12].toString().bold,x4[14].toString().bold]
        ,['----?----', '----?----','----?----','----?----','-?-','-?-']
        )

        console.log(table.toString());
        console.timeEnd("Time elapsed".bold.red);
        //var Table = require('cli-table');
        // instantiate
     /* //Horizontal Tables
        var table = new Table({
        head: ['TH 1 label', 'TH 2 label']
        , colWidths: [25, 50]
        });

        // table is an Array, so you can `push`, `unshift`, `splice` and friends
        table.push(
        ['First value', 'Second value']
        ,['First value', 'Second value']
        );

        console.log(table.toString());
    */

    /*  //Vertical Tables
        var Table = require('cli-table');
        var table = new Table();

        table.push(
        { 'Some key': 'Some value' }
        , { 'Another key': 'Another value' }
        );

        console.log(table.toString());
    */

    /*  //Cross Tables
        var Table = require('cli-table');
        var table = new Table({ head: ["", "Top Header 1", "Top Header 2"] });

        table.push(
        { 'Left Header 1': ['Value Row 1 Col 1', 'Value Row 1 Col 2'] }
        , { 'Left Header 2': ['Value Row 2 Col 1', 'Value Row 2 Col 2'] }
        );

        console.log(table.toString());

    */

    /*  //Custom styles
        var table = new Table({
        chars: { 'top': '═' , 'top-mid': '╤' , 'top-left': '╔' , 'top-right': '╗'
         , 'bottom': '═' , 'bottom-mid': '╧' , 'bottom-left': '╚' , 'bottom-right': '╝'
         , 'left': '║' , 'left-mid': '╟' , 'mid': '─' , 'mid-mid': '┼'
         , 'right': '║' , 'right-mid': '╢' , 'middle': '│' }
        });

        table.push(
        ['foo', 'bar', 'baz']
        , ['frob', 'bar', 'quuz']
        );

        console.log(table.toString());
    */
           doneFn();
        return;

        case 'top':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'top <rank #>')) break;
        
        var rank = parseInt(toks[1]);
        //console.log(rank);
        
        function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }

        console.time("Time elapsed".bold.red);

        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/rank/'+ rank +'/1');
        if(myHTMLRequest.length==0)
        {
        	console.log("Rank number invalid!".bold.red);
        	break;
        }
        var ar = myHTMLRequest.toString().split(/[{},"':]+/);
        var x = [];
        for(i=0;i<ar.length;++i)
        {
            var ar1 = ar[i].toString().split(/[,]+/);
            x[i] = ar1;
            //console.log((i)+". "+ar1+'\n');
        }

        //Horizontal Tables
        var table = new Table({
        head: ['Rank'.bold, 'User ID'.bold, 'Name'.bold, 'User Name'.bold, 'AC'.bold, 'Submit'.bold]
        , colWidths: [14, 15,30,18,10,10]
        });

        // table is an Array, so you can `push`, `unshift`, `splice` and friends
        table.push(
        [x[2].toString().bold.green, x[6].toString().bold.green,x[8].toString().bold.green,x[10].toString().bold.green,x[12].toString().bold.green,x[14].toString().bold.green]
        )

        console.log(table.toString());
        console.timeEnd("Time elapsed".bold.red);

        doneFn();
       
        
        return;




        case 'id':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        if (!checkToks(1, 'id <username>')) break;
        
        var user = (toks[1]).toString();
        //console.log(rank);
        
        function httpGet(theUrl)
        {
            var xmlHttp = null;
            var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", theUrl, false );
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }

        console.time("Time elapsed".bold.red);
        var id;
        var myHTMLRequest = httpGet('http://uhunt.felix-halim.net/api/uname2uid/' + user);
        id = parseInt(myHTMLRequest);
        if(id==0)
        {
            console.log("User name ".bold.red + '\'' + user.bold.yellow + '\'' + " does not exist!".bold.red);
            break;
        }
        
        console.log("User name ".bold.green + '\'' + user.bold.yellow + '\'' + " have id: ".bold.green + id.toString().bold.yellow);

        doneFn();
       
        
        return;
        //----------------------------------------------------------------------

    case 'set-browser':
        if (toks.length < 2)
        {
            console.log('Syntax: set-browser <path> [<arg1> <arg2> ...]');
            break;
        }

        app.setBrowser(toks[1], toks.slice(2));
        console.log('Browser set');
        break;

    case 'get-browser':
        var opts = app.getBrowser();
        process.stdout.write('Command: '+opts.path+' <url>');

        for (var i=0;i<opts.args.length;i++)
        {
            process.stdout.write(' ');
            process.stdout.write(opts.args[i]);
        }
        console.log();
        break;

    case 'set-editor':
        if (!checkToks(1, 'set-editor <editor path>')) break;
        app.setEditor(toks[1]);
        console.log('Editor set');
        break;

    case 'edit':
        if (!checkToks(1, 'edit <file path>')) break;
        app.edit(toks[1], function(e){
            if (e)
                console.log('Cannot edit: '+e.message);
            else
                console.log('Edit done');
            doneFn();
        });
        return;

    case 'tpl':
        if (toks.length <= 1)
        {
            console.log('Syntax: tpl add <filePath> OR tpl remove <lang> OR tpl show');
            break;
        }

        var subAction = toks[1].toLowerCase();
        tplHandle(subAction);
        break;

    case 'send':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;

        var probNum, filePath;

        if (toks.length == 2)
        {
            var input = toks[1]; // can be prob# or filePath
            if (fs.existsSync(input))
            {
                probNum = curAdap.inferProbNum(input);
                filePath = input;
                if (!probNum)
                {
                    console.log('file "%s" exists, but cannot infer problem number.', input);
                    break;
                }
            }
            else
            {
                var files = curAdap.findFileNames(input);
                if (files.length == 0)
                {
                    console.log('Cannot find source files in current directory for problem: %s', input);
                    break;
                }

                if (files.length > 1)
                {
                    console.log('Multiple source files found: "%s", "%s", ...', files[0], files[1]);
                    break;
                }

                filePath = files[0];
                probNum = input;
            }

            console.log('Inferred Problem #: %s', probNum);
            console.log('       Source file: %s', filePath);
        }
        else if (toks.length == 3)
        {
            probNum = toks[1];
            filePath = toks[2];
        }
        else 
        {
            checkToks(2, 'send <prob#> <fileName/Path>');
            break;
        }
        
        try
        {
            console.log('Logging in...');
            curAdap.login(function(e){
                if (e)
                {
                    console.log('Login error: '+e.message);
                    doneFn();
                    return;
                }

                console.log('Sending code...');
                curAdap.send(probNum, filePath, function(e){
                    if (e)
                        console.log('send failed: '+e.message);
                    else
                        console.log('Send ok');
                    doneFn();
                });    
            });

            return;
        }
        catch (e)
        {
            console.log('Send error: '+e.message);
        }
        break;

    case 'use':
        if (toks.length === 3)
        {
            try {
                app.use(toks[1], toks[2]);
                console.log('Account set as current');
            }
            catch (e){
                printError(e);
            }
        }
        else if (toks.length === 1)
        {
            app.useNone();
            console.log('Current account set to none');
        }
        else
            checkToks(2, 'use <type> <userName> OR use');

        break;

    case 'add':
        // use traditional space-splitting in case password has quote chars.
        toks = line.trim().split(/\s+/g);
        if (! checkToks(3, 'add <type> <userName> <password>')) break;
        
        var normType = Adapter.normalizeType(toks[1]);
        if (!normType)
        {
            console.log('invalid type');
            break;
        }

        var acct = new Account({type: toks[1], user: toks[2], pass: toks[3]});
        var replaced = app.add(acct);
        if (replaced)
            console.log('An existing account was replaced');
        else
            console.log('Account added successfully');
        
        break;

    case 'remove':
        if (!checkToks(2, 'remove <type> <userName>')) break;

        try {
            app.remove(toks[1], toks[2]);
            console.log('Account removed');
        }
        catch(e) {
            printError(e);
        }
        
        break;

    case 'show':
        var size = app.size();

        if (!size)
        {
            console.log('No accounts');
            break;
        }   

        console.log('      type     | user');
        //           12345678901234---1234

        for (var i=0;i < size; i++)
        {
            var acct = app.get(i);
            console.log(sprintf("%-14s   %s", acct.type(), acct.user()));
        }

        break;

    case 'stat':
    case 'status':
        var curAdap = getCurrentAdapter();
        if (!curAdap) break;
        
        var num = 10;
        if (toks.length == 2) 
        {
            num = parseInt(toks[1]);
            if (num <= 0 || isNaN(num))
            {
                console.log('must be positive integer');
                break;
            }
        }
        else if (toks.length !== 1)
        {
            console.log('Syntax: stat/status <count>');
            break;
        }

        console.log('Getting status...');
        curAdap.fetchStatus(num, function(e, subs){
            if (e)
                console.log('Status error: '+e.message);
            else
                printStatus(subs);
            doneFn();
        });

        return;

    default:
        console.log('Unrecognized action');
        break;
    }

    doneFn();
}

